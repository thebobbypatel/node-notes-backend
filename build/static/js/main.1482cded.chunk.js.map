{"version":3,"sources":["components/Note.js","services/notes.js","components/Notification.js","components/Footer.js","App.js","index.js"],"names":["Note","note","toggleImportance","deleteNote","label","important","className","content","onClick","axios","get","then","response","data","newObject","post","id","put","delete","Notification","message","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","console","log","length","notesToShow","filter","map","i","key","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","deletedNote","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"oMAeeA,EAbF,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,iBAAkBC,EAAiB,EAAjBA,WAC9BC,EAAQH,EAAKI,UACb,qBAAuB,iBAE7B,OACI,wBAAIC,UAAU,QACTL,EAAKM,QACN,4BAAQC,QAASN,GAAmBE,GACpC,4BAAQI,QAASL,GAAjB,Y,8BCcG,EApBA,WAEb,OADgBM,IAAMC,IAHR,cAICC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAkB5B,EAfA,SAAAC,GAEb,OADgBL,IAAMM,KARR,aAQsBD,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAa5B,EAVA,SAACG,EAAIF,GAElB,OADgBL,IAAMQ,IAAN,UAbF,aAaE,YAAwBD,GAAMF,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ5B,EALA,SAACG,GAEZ,OADgBP,IAAMS,OAAN,UAlBJ,aAkBI,YAA2BF,IAC5BL,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCP9BM,EAZM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpB,OAAgB,OAAZA,EACK,KAIP,yBAAKd,UAAU,SACZc,ICOMC,EAdA,WAMb,OACE,yBAAKC,MANa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,KAIR,6BACA,uGCgHWC,EApHL,WAAO,IAAD,EACYC,mBAAS,IADrB,mBACPC,EADO,KACAC,EADA,OAEgBF,mBAAS,iBAFzB,mBAEPG,EAFO,KAEEC,EAFF,OAGgBJ,oBAAS,GAHzB,mBAGPK,EAHO,KAGEC,EAHF,OAI0BN,mBAAS,MAJnC,mBAIPO,EAJO,KAIOC,EAJP,KAcdC,qBARa,WACTC,IAEK1B,MAAK,SAAA2B,GACFT,EAASS,QAIL,IAChBC,QAAQC,IAAI,SAAUZ,EAAMa,OAAQ,SAEpC,IAgEMC,EAAcV,EACdJ,EACAA,EAAMe,QAAO,SAAA1C,GAAI,OAAIA,EAAKI,aAEhC,OACE,6BACE,qCACA,kBAAC,EAAD,CAAce,QAASc,IACvB,6BACI,4BAAQ1B,QAAS,kBAAMyB,GAAYD,KAAnC,QACUA,EAAU,YAAc,QAGtC,4BACGU,EAAYE,KAAI,SAAC3C,EAAK4C,GAAN,OACf,kBAAC,EAAD,CACIC,IAAKD,EACL5C,KAAMA,EACNC,iBAAkB,kBA7DH,SAAAc,GACd,sCAAkCA,GAA3C,IACMf,EAAO2B,EAAMmB,MAAK,SAAAC,GAAC,OAAIA,EAAEhC,KAAOA,KAChCiC,EAAW,2BAAOhD,GAAP,IAAaI,WAAYJ,EAAKI,YAE/CgC,EACYrB,EAAIiC,GACXtC,MAAK,SAAAuC,GACFrB,EAASD,EAAMgB,KAAI,SAAA3C,GAAI,OAAIA,EAAKe,KAAOA,EAAKf,EAAOiD,SAEtDC,OAAM,SAAAC,GACHjB,EAAgB,SAAD,OACFlC,EAAKM,QADH,sCAGb8C,YAAW,WACTlB,EAAgB,QACf,KACLN,EAASD,EAAMe,QAAO,SAAAK,GAAC,OAAIA,EAAEhC,KAAOA,SA4CZsC,CAAmBrD,EAAKe,KAChDb,WAAY,kBAzCL,SAAAa,GACN,sCAAkCA,GAA3C,IACMf,EAAO2B,EAAMmB,MAAK,SAAAC,GAAC,OAAIA,EAAEhC,KAAOA,KAEtCqB,EACYrB,GACPL,MAAK,SAAA4C,GACFhB,QAAQC,IAAI,WAAYvC,EAAKM,SAC7BsB,EAASD,EAAMe,QAAO,SAAAK,GAAC,OAAIA,EAAEhC,KAAOA,SAEvCmC,OAAM,SAAAC,GACHjB,EAAgB,SAAD,OACFlC,EAAKM,QADH,sCAGb8C,YAAW,WACTlB,EAAgB,QACf,KACLI,QAAQC,IAAI,0CACZX,EAASD,EAAMe,QAAO,SAAAK,GAAC,OAAIA,EAAEhC,KAAOA,SAuBlBb,CAAWF,EAAKe,WAI1C,0BAAMwC,SAvFM,SAACC,GACbA,EAAMC,iBACN,IAAMC,EAAa,CACfpD,QAASuB,EACT8B,MAAM,IAAIC,MAAOC,cACjBzD,UAAW0D,KAAKC,SAAW,IAG/B3B,EACYsB,GACPhD,MAAK,SAAAuC,GACFrB,EAASD,EAAMqC,OAAOf,IACtBnB,EAAW,SA4Ef,2BACImC,MAAOpC,EACPqC,SA1Ea,SAACV,GACtBlB,QAAQC,IAAIiB,EAAMW,OAAOF,OACzBnC,EAAW0B,EAAMW,OAAOF,UA0EpB,4BAAQG,KAAK,UAAb,SAEJ,kBAAC,EAAD,Q,MC/GRC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.1482cded.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleImportance, deleteNote }) => {\n    const label = note.important \n        ? 'make not important' : 'make important'\n\n    return (\n        <li className='note'>\n            {note.content}\n            <button onClick={toggleImportance}>{label}</button>\n            <button onClick={deleteNote}>delete</button>\n        </li>\n    )\n}\n\nexport default Note","import axios from 'axios'\n// const baseUrl = 'http://localhost:3001/api/notes'\nconst baseUrl = '/api/notes'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nconst remove = (id) => {\n    const request = axios.delete(`${baseUrl}/${id}`)\n    return request.then(response => response.data)\n}\n\nexport default { getAll, create, update, remove }","import React from 'react'\n\nconst Notification = ({ message }) => {\n    if (message === null) {\n      return null\n    }\n  \n    return (\n      <div className=\"error\">\n        {message}\n      </div>\n    )\n  }\n\nexport default Notification","import React from 'react'\n\nconst Footer = () => {\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 16\n  }\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>Note app, Department of Computer Science, University of Helsinki 2020</em>\n    </div>\n  )\n}\n\nexport default Footer","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport axios from 'axios'\nimport noteService from './services/notes'\nimport Notification from './components/Notification'\nimport Footer from './components/Footer'\n\nconst App = () => {\n    const [notes, setNotes] = useState([])\n    const [newNote, setNewNote] = useState('a new note...')\n    const [showAll, setShowAll] = useState(true)\n    const [errorMessage, setErrorMessage] = useState(null)\n\n    const hook = () => {\n        noteService\n            .getAll()\n            .then(initialNotes => {\n                setNotes(initialNotes)\n            })\n    }\n\n    useEffect(hook, [])\n    console.log('render', notes.length, 'notes')\n\n    const addNote = (event) => {\n        event.preventDefault()\n        const noteObject = {\n            content: newNote,\n            date: new Date().toISOString(),\n            important: Math.random() < 0.5,\n        }\n\n        noteService\n            .create(noteObject)\n            .then(returnedNote => {\n                setNotes(notes.concat(returnedNote))\n                setNewNote('')\n            })\n    }\n\n    const handleNoteChange = (event) => {\n        console.log(event.target.value)\n        setNewNote(event.target.value)\n    }\n\n    const toggleImportanceOf = id => {\n        const url = `http://localhost:3001/notes/${id}`\n        const note = notes.find(n => n.id === id)\n        const changedNote = {...note, important: !note.important}\n\n        noteService\n            .update(id, changedNote)\n            .then(returnedNote => {\n                setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n            })\n            .catch(error => {\n                setErrorMessage(\n                    `Note '${note.content}' was already removed from server`\n                  )\n                  setTimeout(() => {\n                    setErrorMessage(null)\n                  }, 5000)\n                setNotes(notes.filter(n => n.id !== id))\n            })\n    }\n\n    const deleteNote = id => {\n        const url = `http://localhost:3001/notes/${id}`\n        const note = notes.find(n => n.id === id)\n\n        noteService\n            .remove(id)\n            .then(deletedNote => {\n                console.log('deleted:', note.content)\n                setNotes(notes.filter(n => n.id !== id))\n            })\n            .catch(error => {\n                setErrorMessage(\n                    `Note '${note.content}' was already removed from server`\n                  )\n                  setTimeout(() => {\n                    setErrorMessage(null)\n                  }, 5000)\n                console.log('that note does not exist in the server')\n                setNotes(notes.filter(n => n.id !== id))\n            })\n    }\n\n    const notesToShow = showAll \n        ? notes \n        : notes.filter(note => note.important)\n\n    return (\n      <div>\n        <h1>Notes</h1>\n        <Notification message={errorMessage} />\n        <div>\n            <button onClick={() => setShowAll(!showAll)}>\n                show {showAll ? 'important' : 'all'}\n            </button>\n        </div>\n        <ul>\n          {notesToShow.map((note,i) => \n            <Note \n                key={i} \n                note={note} \n                toggleImportance={() => toggleImportanceOf(note.id)}\n                deleteNote={() => deleteNote(note.id)}\n            />\n          )}\n        </ul>\n        <form onSubmit={addNote}>\n            <input \n                value={newNote}\n                onChange={handleNoteChange}    \n            />\n            <button type=\"submit\">save</button>\n        </form>\n        <Footer />\n      </div>\n    )\n  }\n\n  export default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport Note from './components/Note'\nimport App from './App'\nimport './index.css'\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}